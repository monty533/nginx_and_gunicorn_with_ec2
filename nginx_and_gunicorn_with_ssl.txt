####################### Nginx and gunicorn and permanent running and ssl #########################

step 1 ==== login to aws ec2 account and start instance with key and security groups
step 2 ++++ login into the laptop machine with credentials provide by aws (ex. ssh)
step 3 ++++ clone the project from github
step 4 ++++ sudo apt-get update (for update the system)
step 5 ==== install python (sudo apt-get install python3) and virtualenv (sudo apt-get install -y python3-venv)
step 6 ++++ make virtual environment (python3 -m venv name) and activate
step 7 ++++ install requirements.tx (pip install -r requirements.txt)
step 8 ==== install nginx (sudo apt-get install nginx) and Install gunicorn (pip install gunicorn)
step 9 ==== bind gunicorn with wsgi (gunicorn --bind 0.0.0.0:8000 app_name.wsgi:application)

+++++++++++++++++++++++ To make permanent running on the server +++++++++++++++++++++++++++

step 10 ++++ install supervisor (sudo apt-get install supervisor)
step 11 ==== cd /etc/supervisor/conf.d/ and then make gunicorn.conf file by command using--
             sudo touch gunicorn.conf
             sudo nano gunicorn.conf 
                
                    (write this code into gnicorn.conf file)

                [program:gunicorn]
                directory = /home/ubuntu/ShoppingHi
                command = /home/ubuntu/montyenv/bin/gunicorn --workers 3 --bind unix:/home/ubuntu/ShoppingHi/app.sock ShoppingHi.wsgi:application>
                                            |                                                       |                       |   
                                            |-> means environment                                     |-> means project name  |->  means appname
                autostart = true
                autorestart=true
                stderr_logfile= /var/log/gunicorn/gunicorn.err.log
                stdout_logfile= /var/log/gunicorn/gunicorn.out.log

                [group:guni]
                programs:gunicorn

step 12 ==== make directory sudo mkdir /var/log/gunicorn and run these commands
         sudo supervisorctl reread   -|
         sudo supervisorctl update   -->  when we any changes in gunicorn.conf file so need to run these 3 commmands
         sudo supervisorctl status   -|
step 13 ++++ sudo systemctl reload nginx

++++++++++++++++++++++ Now we have to configure nginx site available default file +++++++++++++++++++++++++++++++
step 14 ==== cd /etc/nginx/sites-available/
                sudo nano default (to open the default file)
                now, we have to do some configuration like server_name,proxy_params

                server_name -> (y  likha hoga phle se) ip_ya_domain_name;
                location/{
                    include proxy_params;
                    proxy_pass http://unix:/home/ubuntu/project_name/app.sock;
                }
step 15 ++++ reload nginx (sudo systemctl reload nginx)

 +++++++ To configure static file +++++++++

step 16 ++++ add some configuration
        #root /var/www/html;           #### comment thse lines
        # Add index.php to the list if you are using PHP
        #index index.html index.htm index.nginx-debian.html;

            location /static/{
                autoindex on;
                alias /home/ubuntu/project_name/static/;     #### jha bhi static ka folder hoga
            }
step 17 ++++ reload nginx (sudo systemctl reload nginx)

===================== To make HTTPS request +++++++++++++++++++++++
step 18 ==== sudo apt-get-repository -r ppa:certbot/certbot
step 19 ++++ sudo apt-get install python3-certbot-nginx
step 20 ==== sudo certbot --nginx -d domain_name or i.p
step 21 ==== sudo systemctl reload nginx 


######################################  DIGITAL OCEAN NGINX AND GUNICORN ######################################################
1 ---  After create digital ocean virtual machine use this commanad 
        ssh root@your_server_ip
        Enter password
        
2 --- Creating a non-root user
      adduser harry -----> user name
      
3 --- usermod -aG sudo harry

4 --- Firewall setup   --- Execute the following command to allow OpenSSH:
      ufw allow OpenSSH
      Enable the firewall by executing the following command:
      ufw enable
      
5 --- Login by command :
      ssh username@your_server_ip
      
